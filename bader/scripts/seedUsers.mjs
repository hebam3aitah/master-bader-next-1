// import mongoose from 'mongoose';
// import dotenv from 'dotenv';
// import { connectDB } from '../src/lib/mongoose.js';
// import User from '../src/models/User.js';

// dotenv.config();

// const dummyUsers = [
//   {
//     name: "ŸÖÿ≠ŸÖÿØ ÿßŸÑÿ£ÿ≠ŸÖÿØ",
//     email: "mohammed@example.com",
//     password: "hashed_password_123", // üî• ŸÖŸÑÿßÿ≠ÿ∏ÿ©: ÿßÿ≥ÿ™ÿÆÿØŸÖ ŸÉŸÑŸÖÿ© ŸÖÿ±Ÿàÿ± ŸÖÿ¥ŸÅÿ±ÿ© ŸÑŸà ŸÉŸÜÿ™ ÿπÿßŸÖŸÑ ŸÑŸàÿ¨ŸäŸÉ ÿ™ÿ≥ÿ¨ŸäŸÑ
//     role: "user",
//     address: "ÿ≠Ÿä ÿßŸÑŸÜÿ≥ŸäŸÖÿå ÿ¥ÿßÿ±ÿπ ÿßŸÑÿ≤ŸáŸàÿ±",
//     profession: "ŸÖŸáŸÜÿØÿ≥ ŸÖÿØŸÜŸä",
//     experience: "5 ÿ≥ŸÜŸàÿßÿ™ ÿÆÿ®ÿ±ÿ© ŸÅŸä ÿßŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ ÿßŸÑÿ™ÿ∑ŸàÿπŸäÿ©",
//     age: 28,
//     IsConfirmed: true,
//   },
//   {
//     name: "ÿ≥ÿßÿ±ÿ© ÿπŸÑŸä",
//     email: "sara@example.com",
//     password: "hashed_password_456",
//     role: "volunteer",
//     address: "ÿ≠Ÿä ÿßŸÑŸàÿ±ŸàÿØÿå ÿ¥ÿßÿ±ÿπ ÿßŸÑÿ±ÿ®Ÿäÿπ",
//     profession: "ÿ∑ÿßŸÑÿ®ÿ© ÿ¨ÿßŸÖÿπŸäÿ©",
//     experience: "ŸÖÿ¥ÿßÿ±ŸÉÿ© ŸÅŸä 10 ÿ≠ŸÖŸÑÿßÿ™ ÿ™ÿ∑ŸàÿπŸäÿ©",
//     age: 22,
//     IsConfirmed: true,
//   },
//   {
//     name: "ÿ£ÿØŸÖŸÜ ÿ±ÿ¶Ÿäÿ≥Ÿä",
//     email: "admin@example.com",
//     password: "hashed_password_admin",
//     role: "admin",
//     address: "ÿ≠Ÿä ÿßŸÑŸÜÿÆŸäŸÑÿå ÿ¥ÿßÿ±ÿπ ÿßŸÑÿ£ŸÖŸÜ",
//     profession: "ŸÖÿØŸäÿ± ŸÖÿ¥ÿ±Ÿàÿπ",
//     experience: "10 ÿ≥ŸÜŸàÿßÿ™ ÿÆÿ®ÿ±ÿ©",
//     age: 35,
//     IsConfirmed: true,
//   }
// ];

// async function seedUsers() {
//   try {
//     await connectDB();
//     await User.deleteMany();
//     await User.insertMany(dummyUsers);
//     console.log('‚úÖ Dummy users inserted successfully!');
//     process.exit(0);
//   } catch (error) {
//     console.error('‚ùå Failed to seed users:', error);
//     process.exit(1);
//   }
// }

// seedUsers();
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import { connectDB } from '../src/lib/mongoose.js';
import User from '../src/models/User.js';
import { faker } from '@faker-js/faker';
import bcrypt from 'bcryptjs';

dotenv.config();

// ‚ö° ŸÉŸÖ ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ®ÿØŸÉ ÿ™ÿ≤ÿ±ÿπÿü
const NUM_USERS = 50;

const dummyUsers = Array.from({ length: NUM_USERS }, () => ({
  name: faker.person.fullName(),
  email: faker.internet.email().toLowerCase(),
  password: bcrypt.hashSync('123456', 10), // üî• ŸÉŸÑŸÖÿ© ŸÖÿ±Ÿàÿ± ŸÖÿ¥ŸÅÿ±ÿ© (ŸÉŸÑŸáŸÖ 123456)
  role: faker.helpers.arrayElement(['user', 'volunteer']),
  image: faker.image.avatar(), // ÿµŸàÿ±ÿ© ÿ®ÿ±ŸàŸÅÿßŸäŸÑ
  profilePicture: faker.image.avatar(), // ŸÜŸÅÿ≥ ÿßŸÑÿµŸàÿ±ÿ© ÿ≠ÿßŸÑŸäÿß
  address: faker.location.streetAddress(),
  profession: faker.person.jobTitle(),
  experience: faker.lorem.sentence(),
  age: faker.number.int({ min: 18, max: 50 }),
  birthDate: faker.date.birthdate({ min: 18, max: 50, mode: 'age' }),
  IsConfirmed: true,
}));

async function seedUsers() {
  try {
    await connectDB();
    await User.deleteMany();
    const insertedUsers = await User.insertMany(dummyUsers);
    console.log(`‚úÖ Inserted ${NUM_USERS} dummy users successfully!`);

    // ‚ú® ÿ™ÿ∑ÿ®ÿπ IDs ÿπÿ¥ÿßŸÜ ÿ™ÿ≥ÿ™ÿÆÿØŸÖŸáŸÖ ÿ®ÿπÿØŸäŸÜ ŸÑŸà ÿ≠ÿßÿ®ÿ® ÿ®ÿßŸÑŸÄ Projects
    console.log('üéØ User IDs:', insertedUsers.map(user => user._id.toString()));
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Failed to seed users:', error);
    process.exit(1);
  }
}

seedUsers();
